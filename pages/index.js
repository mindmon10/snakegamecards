import React, { useState, useEffect } from 'react';

const cards = [
  { question: "üïí Áé∞Âú®Âá†ÁÇπ‰∫ÜÔºü", level: "‡∏¢‡∏≤‡∏Å", result: "‡∏ñ‡∏π‡∏Å: ‡πÄ‡∏î‡∏¥‡∏ô 9 ‡∏ä‡πà‡∏≠‡∏á / ‡∏ú‡∏¥‡∏î: ‡πÄ‡∏î‡∏¥‡∏ô 1 ‡∏ä‡πà‡∏≠‡∏á" },
  { question: "üìÖ ‰ªäÂ§©ÊòüÊúüÂá†Ôºü", level: "‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á", result: "‡∏ñ‡∏π‡∏Å: ‡πÄ‡∏î‡∏¥‡∏ô 7 ‡∏ä‡πà‡∏≠‡∏á / ‡∏ú‡∏¥‡∏î: ‡πÄ‡∏î‡∏¥‡∏ô 0 ‡∏ä‡πà‡∏≠‡∏á" },
  { question: "üë¶ ‰Ω†Âè´‰ªÄ‰πàÂêçÂ≠óÔºü", level: "‡∏á‡πà‡∏≤‡∏¢", result: "‡∏ñ‡∏π‡∏Å: ‡πÄ‡∏î‡∏¥‡∏ô 6 ‡∏ä‡πà‡∏≠‡∏á / ‡∏ú‡∏¥‡∏î: ‡πÄ‡∏î‡∏¥‡∏ô 1 ‡∏ä‡πà‡∏≠‡∏á" },
  { question: "üé® ‰Ω†Âú®ÂÅö‰ªÄ‰πàÔºü", level: "‡∏á‡πà‡∏≤‡∏¢", result: "‡∏ñ‡∏π‡∏Å: ‡πÄ‡∏î‡∏¥‡∏ô 8 ‡∏ä‡πà‡∏≠‡∏á / ‡∏ú‡∏¥‡∏î: ‡πÄ‡∏î‡∏¥‡∏ô 1 ‡∏ä‡πà‡∏≠‡∏á" },
  { question: "üçì ‰Ω†ÂñúÊ¨¢ËçâËéìÂêóÔºü", level: "‡∏á‡πà‡∏≤‡∏¢", result: "‡∏ñ‡∏π‡∏Å: ‡πÄ‡∏î‡∏¥‡∏ô 5 ‡∏ä‡πà‡∏≠‡∏á / ‡∏ú‡∏¥‡∏î: ‡πÄ‡∏î‡∏¥‡∏ô 0 ‡∏ä‡πà‡∏≠‡∏á" }
];

export default function Home() {
  const [currentCard, setCurrentCard] = useState(null);
  const [lineUser, setLineUser] = useState(null);

  const drawCard = () => {
    const randomIndex = Math.floor(Math.random() * cards.length);
    setCurrentCard(cards[randomIndex]);
  };

  useEffect(() => {
    if (typeof window !== 'undefined' && window.liff) {
      window.liff.init({ liffId: "1651234567-abc123" })
        .then(() => {
          if (window.liff.isLoggedIn()) {
            return window.liff.getProfile();
          } else {
            window.liff.login();
          }
        })
        .then(profile => {
          if (profile) setLineUser(profile);
        })
        .catch(err => console.error("LIFF init error:", err));
    }
  }, []);

  return (
    <div style={{ textAlign: 'center', padding: '2rem' }}>
      <h1 style={{ fontSize: '2rem' }}>üé≤ ‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ö‡∏±‡∏ô‡πÑ‡∏î‡∏á‡∏π</h1>
      {lineUser && <p style={{ color: 'gray' }}>üë§ {lineUser.displayName}</p>}
      <button onClick={drawCard} style={{ padding: '1rem 2rem', margin: '2rem', fontSize: '1.2rem' }}>
        ‡∏™‡∏∏‡πà‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°
      </button>
      {currentCard && (
        <div style={{ border: '1px solid #ccc', padding: '2rem', maxWidth: '400px', margin: '0 auto' }}>
          <p style={{ fontSize: '1.5rem' }}>{currentCard.question}</p>
          <p>‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏Å: <strong>{currentCard.level}</strong></p>
          <p style={{ color: 'green' }}>{currentCard.result}</p>
        </div>
      )}
    </div>
  );
}